# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2018, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-11-03 18:54+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../library/asyncio-stream.rst:7
msgid "Streams"
msgstr ""

#: ../library/asyncio-stream.rst:9
msgid "Streams are high-level async/await-ready primitives to work with network connections.  Streams allow sending and receiving data without using callbacks or low-level protocols and transports."
msgstr ""

#: ../library/asyncio-stream.rst:15
msgid "Here is an example of a TCP echo client written using asyncio streams::"
msgstr ""

#: ../library/asyncio-stream.rst:36
msgid "See also the `Examples`_ section below."
msgstr ""

#: ../library/asyncio-stream.rst:40
msgid "Stream Functions"
msgstr ""

#: ../library/asyncio-stream.rst:41
msgid "The following top-level asyncio functions can be used to create and work with streams:"
msgstr ""

#: ../library/asyncio-stream.rst:50
msgid "Establish a network connection and return a pair of ``(reader, writer)`` objects."
msgstr ""

#: ../library/asyncio-stream.rst:53
msgid "The returned *reader* and *writer* objects are instances of :class:`StreamReader` and :class:`StreamWriter` classes."
msgstr ""

#: ../library/asyncio-stream.rst:56
msgid "The *loop* argument is optional and can always be determined automatically when this function is awaited from a coroutine."
msgstr ""

#: ../library/asyncio-stream.rst:59
#: ../library/asyncio-stream.rst:92
msgid "*limit* determines the buffer size limit used by the returned :class:`StreamReader` instance.  By default the *limit* is set to 64 KiB."
msgstr ""

#: ../library/asyncio-stream.rst:63
msgid "The rest of the arguments are passed directly to :meth:`loop.create_connection`."
msgstr ""

#: ../library/asyncio-stream.rst:68
#: ../library/asyncio-stream.rst:121
msgid "The *ssl_handshake_timeout* parameter."
msgstr ""

#: ../library/asyncio-stream.rst:78
msgid "Start a socket server."
msgstr ""

#: ../library/asyncio-stream.rst:80
msgid "The *client_connected_cb* callback is called whenever a new client connection is established.  It receives a ``(reader, writer)`` pair as two arguments, instances of the :class:`StreamReader` and :class:`StreamWriter` classes."
msgstr ""

#: ../library/asyncio-stream.rst:85
msgid "*client_connected_cb* can be a plain callable or a :ref:`coroutine function <coroutine>`; if it is a coroutine function, it will be automatically scheduled as a :class:`Task`."
msgstr ""

#: ../library/asyncio-stream.rst:89
msgid "The *loop* argument is optional and can always be determined automatically when this method is awaited from a coroutine."
msgstr ""

#: ../library/asyncio-stream.rst:96
msgid "The rest of the arguments are passed directly to :meth:`loop.create_server`."
msgstr ""

#: ../library/asyncio-stream.rst:101
#: ../library/asyncio-stream.rst:143
msgid "The *ssl_handshake_timeout* and *start_serving* parameters."
msgstr ""

#: ../library/asyncio-stream.rst:105
msgid "Unix Sockets"
msgstr ""

#: ../library/asyncio-stream.rst:110
msgid "Establish a Unix socket connection and return a pair of ``(reader, writer)``."
msgstr ""

#: ../library/asyncio-stream.rst:113
msgid "Similar to :func:`open_connection` but operates on Unix sockets."
msgstr ""

#: ../library/asyncio-stream.rst:115
msgid "See also the documentation of :meth:`loop.create_unix_connection`."
msgstr ""

#: ../library/asyncio-stream.rst:118
#: ../library/asyncio-stream.rst:140
msgid "Availability: Unix."
msgstr ""

#: ../library/asyncio-stream.rst:125
msgid "The *path* parameter can now be a :term:`path-like object`"
msgstr ""

#: ../library/asyncio-stream.rst:133
msgid "Start a Unix socket server."
msgstr ""

#: ../library/asyncio-stream.rst:135
msgid "Similar to :func:`start_server` but works with Unix sockets."
msgstr ""

#: ../library/asyncio-stream.rst:137
msgid "See also the documentation of :meth:`loop.create_unix_server`."
msgstr ""

#: ../library/asyncio-stream.rst:147
msgid "The *path* parameter can now be a :term:`path-like object`."
msgstr ""

#: ../library/asyncio-stream.rst:154
msgid "StreamReader"
msgstr ""

#: ../library/asyncio-stream.rst:158
msgid "Represents a reader object that provides APIs to read data from the IO stream."
msgstr ""

#: ../library/asyncio-stream.rst:161
msgid "It is not recommended to instantiate *StreamReader* objects directly; use :func:`open_connection` and :func:`start_server` instead."
msgstr ""

#: ../library/asyncio-stream.rst:167
msgid "Read up to *n* bytes.  If *n* is not provided, or set to ``-1``, read until EOF and return all read bytes."
msgstr ""

#: ../library/asyncio-stream.rst:170
msgid "If EOF was received and the internal buffer is empty, return an empty ``bytes`` object."
msgstr ""

#: ../library/asyncio-stream.rst:175
msgid "Read one line, where \"line\" is a sequence of bytes ending with ``\\n``."
msgstr ""

#: ../library/asyncio-stream.rst:178
msgid "If EOF is received and ``\\n`` was not found, the method returns partially read data."
msgstr ""

#: ../library/asyncio-stream.rst:181
msgid "If EOF is received and the internal buffer is empty, return an empty ``bytes`` object."
msgstr ""

#: ../library/asyncio-stream.rst:186
msgid "Read exactly *n* bytes."
msgstr ""

#: ../library/asyncio-stream.rst:188
msgid "Raise an :exc:`IncompleteReadError` if EOF is reached before *n* can be read.  Use the :attr:`IncompleteReadError.partial` attribute to get the partially read data."
msgstr ""

#: ../library/asyncio-stream.rst:194
msgid "Read data from the stream until *separator* is found."
msgstr ""

#: ../library/asyncio-stream.rst:196
msgid "On success, the data and separator will be removed from the internal buffer (consumed). Returned data will include the separator at the end."
msgstr ""

#: ../library/asyncio-stream.rst:200
msgid "If the amount of data read exceeds the configured stream limit, a :exc:`LimitOverrunError` exception is raised, and the data is left in the internal buffer and can be read again."
msgstr ""

#: ../library/asyncio-stream.rst:204
msgid "If EOF is reached before the complete separator is found, an :exc:`IncompleteReadError` exception is raised, and the internal buffer is reset.  The :attr:`IncompleteReadError.partial` attribute may contain a portion of the separator."
msgstr ""

#: ../library/asyncio-stream.rst:213
msgid "Return ``True`` if the buffer is empty and :meth:`feed_eof` was called."
msgstr ""

#: ../library/asyncio-stream.rst:218
msgid "StreamWriter"
msgstr ""

#: ../library/asyncio-stream.rst:222
msgid "Represents a writer object that provides APIs to write data to the IO stream."
msgstr ""

#: ../library/asyncio-stream.rst:225
msgid "It is not recommended to instantiate *StreamWriter* objects directly; use :func:`open_connection` and :func:`start_server` instead."
msgstr ""

#: ../library/asyncio-stream.rst:231
#: ../library/asyncio-stream.rst:268
msgid "Write *data* to the stream."
msgstr ""

#: ../library/asyncio-stream.rst:233
msgid "The method respects flow control, execution is paused if the write buffer reaches the high watermark."
msgstr ""

#: ../library/asyncio-stream.rst:240
#: ../library/asyncio-stream.rst:298
msgid "Close the stream."
msgstr ""

#: ../library/asyncio-stream.rst:242
msgid "Wait until all closing actions are complete, e.g. SSL shutdown for secure sockets."
msgstr ""

#: ../library/asyncio-stream.rst:249
msgid "Return *True* if the underlying transport supports the :meth:`write_eof` method, *False* otherwise."
msgstr ""

#: ../library/asyncio-stream.rst:254
msgid "Close the write end of the stream after the buffered write data is flushed."
msgstr ""

#: ../library/asyncio-stream.rst:259
msgid "Return the underlying asyncio transport."
msgstr ""

#: ../library/asyncio-stream.rst:263
msgid "Access optional transport information; see :meth:`BaseTransport.get_extra_info` for details."
msgstr ""

#: ../library/asyncio-stream.rst:270
msgid "This method is not subject to flow control.  Calls to ``write()`` should be followed by :meth:`drain`.  The :meth:`awrite` method is a recommended alternative the applies flow control automatically."
msgstr ""

#: ../library/asyncio-stream.rst:276
msgid "Write a list (or any iterable) of bytes to the stream."
msgstr ""

#: ../library/asyncio-stream.rst:278
msgid "This method is not subject to flow control. Calls to ``writelines()`` should be followed by :meth:`drain`."
msgstr ""

#: ../library/asyncio-stream.rst:283
msgid "Wait until it is appropriate to resume writing to the stream. Example::"
msgstr ""

#: ../library/asyncio-stream.rst:289
msgid "This is a flow control method that interacts with the underlying IO write buffer.  When the size of the buffer reaches the high watermark, *drain()* blocks until the size of the buffer is drained down to the low watermark and writing can be resumed.  When there is nothing to wait for, the :meth:`drain` returns immediately."
msgstr ""

#: ../library/asyncio-stream.rst:302
msgid "Return ``True`` if the stream is closed or in the process of being closed."
msgstr ""

#: ../library/asyncio-stream.rst:309
msgid "Wait until the stream is closed."
msgstr ""

#: ../library/asyncio-stream.rst:311
msgid "Should be called after :meth:`close` to wait until the underlying connection is closed."
msgstr ""

#: ../library/asyncio-stream.rst:318
msgid "Examples"
msgstr ""

#: ../library/asyncio-stream.rst:323
msgid "TCP echo client using streams"
msgstr ""

#: ../library/asyncio-stream.rst:325
msgid "TCP echo client using the :func:`asyncio.open_connection` function::"
msgstr ""

#: ../library/asyncio-stream.rst:347
msgid "The :ref:`TCP echo client protocol <asyncio_example_tcp_echo_client_protocol>` example uses the low-level :meth:`loop.create_connection` method."
msgstr ""

#: ../library/asyncio-stream.rst:354
msgid "TCP echo server using streams"
msgstr ""

#: ../library/asyncio-stream.rst:356
msgid "TCP echo server using the :func:`asyncio.start_server` function::"
msgstr ""

#: ../library/asyncio-stream.rst:389
msgid "The :ref:`TCP echo server protocol <asyncio_example_tcp_echo_server_protocol>` example uses the :meth:`loop.create_server` method."
msgstr ""

#: ../library/asyncio-stream.rst:394
msgid "Get HTTP headers"
msgstr ""

#: ../library/asyncio-stream.rst:396
msgid "Simple example querying HTTP headers of the URL passed on the command line::"
msgstr ""

#: ../library/asyncio-stream.rst:434
msgid "Usage::"
msgstr ""

#: ../library/asyncio-stream.rst:438
msgid "or with HTTPS::"
msgstr ""

#: ../library/asyncio-stream.rst:446
msgid "Register an open socket to wait for data using streams"
msgstr ""

#: ../library/asyncio-stream.rst:448
msgid "Coroutine waiting until a socket receives data using the :func:`open_connection` function::"
msgstr ""

#: ../library/asyncio-stream.rst:482
msgid "The :ref:`register an open socket to wait for data using a protocol <asyncio_example_create_connection>` example uses a low-level protocol and the :meth:`loop.create_connection` method."
msgstr ""

#: ../library/asyncio-stream.rst:486
msgid "The :ref:`watch a file descriptor for read events <asyncio_example_watch_fd>` example uses the low-level :meth:`loop.add_reader` method to watch a file descriptor."
msgstr ""

