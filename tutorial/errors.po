# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2019, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Leticia Portella <leportella@gmail.com>, 2017
# Claudio Rogerio Carvalho Filho, 2017
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-01-01 10:14+0900\n"
"PO-Revision-Date: 2017-02-16 23:40+0000\n"
"Last-Translator: Claudio Rogerio Carvalho Filho, 2017\n"
"Language-Team: Portuguese (Brazil) (https://www.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

#: ../../tutorial/errors.rst:5
msgid "Errors and Exceptions"
msgstr "Erros e Exceções"

#: ../../tutorial/errors.rst:7
msgid ""
"Until now error messages haven't been more than mentioned, but if you have "
"tried out the examples you have probably seen some.  There are (at least) "
"two distinguishable kinds of errors: *syntax errors* and *exceptions*."
msgstr ""
"Até agora mensagens de erro foram apenas mencionadas, mas se você testou os\n"
"exemplos, talvez tenha esbarrado em algumas. Existem pelo menos dois tipos\n"
"distintos de erros: *erros de sintaxe* e *exceções*."

#: ../../tutorial/errors.rst:15
msgid "Syntax Errors"
msgstr "Erros de Sintaxe"

#: ../../tutorial/errors.rst:17
msgid ""
"Syntax errors, also known as parsing errors, are perhaps the most common "
"kind of complaint you get while you are still learning Python::"
msgstr ""
"Erros de sintaxe, também conhecidos como erros de parse, são provavelmente "
"os\n"
"mais frequentes entre aqueles que ainda estão aprendendo Python::"

#: ../../tutorial/errors.rst:26
msgid ""
"The parser repeats the offending line and displays a little 'arrow' pointing "
"at the earliest point in the line where the error was detected.  The error "
"is caused by (or at least detected at) the token *preceding* the arrow: in "
"the example, the error is detected at the function :func:`print`, since a "
"colon (``':'``) is missing before it.  File name and line number are printed "
"so you know where to look in case the input came from a script."
msgstr ""
"O parser repete a linha inválida e apresenta uma pequena 'seta' apontando "
"para\n"
"o ponto da linha em que o erro foi encontrado. O erro é causado (ou ao "
"menos\n"
"detectado) pelo token que *precede* a seta: no exemplo, o erro foi "
"detectado\n"
"na palavra reservada :keyword:`print`, uma vez que o dois-pontos (``':'``)\n"
"está faltando antes dela. O nome de arquivo e número de linha são exibidos\n"
"para que você possa rastrear o erro no texto do script."

#: ../../tutorial/errors.rst:37
msgid "Exceptions"
msgstr "Exceções"

#: ../../tutorial/errors.rst:39
msgid ""
"Even if a statement or expression is syntactically correct, it may cause an "
"error when an attempt is made to execute it. Errors detected during "
"execution are called *exceptions* and are not unconditionally fatal: you "
"will soon learn how to handle them in Python programs.  Most exceptions are "
"not handled by programs, however, and result in error messages as shown "
"here::"
msgstr ""
"Mesmo que um comando ou expressão estejam sintaticamente corretos, talvez\n"
"ocorra um erro na hora de sua execução. Erros detectados durante a execução\n"
"são chamados *exceções* e não são necessariamente fatais: logo veremos como\n"
"tratá-las em programas Python. A maioria das exceções não são tratadas e\n"
"acabam resultando em mensagens de erro::"

#: ../../tutorial/errors.rst:58
msgid ""
"The last line of the error message indicates what happened. Exceptions come "
"in different types, and the type is printed as part of the message: the "
"types in the example are :exc:`ZeroDivisionError`, :exc:`NameError` and :exc:"
"`TypeError`. The string printed as the exception type is the name of the "
"built-in exception that occurred.  This is true for all built-in exceptions, "
"but need not be true for user-defined exceptions (although it is a useful "
"convention). Standard exception names are built-in identifiers (not reserved "
"keywords)."
msgstr ""
"A última linha da mensagem de erro indica o que aconteceu. Exceções surgem "
"com\n"
"diferentes tipos, e o tipo é exibido como parte da mensagem: os tipos no\n"
"exemplo são :exc:`ZeroDivisionError`, :exc:`NameError` e :exc:`TypeError`. "
"A\n"
"string exibida como sendo o tipo da exceção é o nome interno da exceção que\n"
"ocorreu. Isso é verdade para todas exceções pré-definidas em Python, mas não "
"é\n"
"necessariamente verdade para exceções definidas pelo usuário (embora seja "
"uma\n"
"convenção útil). Os nomes das exceções padrões são identificadores "
"embutidos\n"
"(não palavras reservadas)."

#: ../../tutorial/errors.rst:66
msgid ""
"The rest of the line provides detail based on the type of exception and what "
"caused it."
msgstr ""
"O resto da linha é um detalhamento que depende do tipo da exceção ocorrida "
"e\n"
"sua causa."

#: ../../tutorial/errors.rst:69
msgid ""
"The preceding part of the error message shows the context where the "
"exception happened, in the form of a stack traceback. In general it contains "
"a stack traceback listing source lines; however, it will not display lines "
"read from standard input."
msgstr ""
"A parte anterior da mensagem de erro apresenta o contexto onde ocorreu a\n"
"exceção. Essa informação é denominada *stack traceback* (situação da pilha "
"de\n"
"execução). Em geral, contém uma lista de linhas do código fonte, sem\n"
"apresentar, no entanto, linhas lidas da entrada padrão."

#: ../../tutorial/errors.rst:74
msgid ""
":ref:`bltin-exceptions` lists the built-in exceptions and their meanings."
msgstr ""
":ref:`bltin-exceptions` lista as exceções pré-definidas e seus significados."

#: ../../tutorial/errors.rst:80
msgid "Handling Exceptions"
msgstr "Lidando com Exceções"

#: ../../tutorial/errors.rst:82
msgid ""
"It is possible to write programs that handle selected exceptions. Look at "
"the following example, which asks the user for input until a valid integer "
"has been entered, but allows the user to interrupt the program (using :kbd:"
"`Control-C` or whatever the operating system supports); note that a user-"
"generated interruption is signalled by raising the :exc:`KeyboardInterrupt` "
"exception. ::"
msgstr ""
"É possível escrever programas que tratam exceções específicas. Observe o\n"
"exemplo seguinte, que pede dados ao usuário até que um inteiro válido seja\n"
"fornecido, ainda permitindo que o programa seja interrompido (utilizando\n"
":kbd:`Control-C` ou seja lá o que for que o sistema operacional suporte); "
"note\n"
"que uma interrupção gerada pelo usuário será sinalizada pela exceção\n"
":exc:`KeyboardInterrupt`. ::"

#: ../../tutorial/errors.rst:96
msgid "The :keyword:`try` statement works as follows."
msgstr "A instrução :keyword:`try` funciona da seguinte maneira:"

#: ../../tutorial/errors.rst:98
msgid ""
"First, the *try clause* (the statement(s) between the :keyword:`try` and :"
"keyword:`except` keywords) is executed."
msgstr ""
"Primeiramente, a *cláusula try* (o conjunto de instruções entre as palavras\n"
" reservadas :keyword:`try` e :keyword:`except` ) é executada."

#: ../../tutorial/errors.rst:101
msgid ""
"If no exception occurs, the *except clause* is skipped and execution of the :"
"keyword:`try` statement is finished."
msgstr ""
"Se nenhuma exceção ocorrer, a *cláusula except* é ignorada e a execução da\n"
" instrução :keyword:`try` é finalizad"

#: ../../tutorial/errors.rst:104
msgid ""
"If an exception occurs during execution of the try clause, the rest of the "
"clause is skipped.  Then if its type matches the exception named after the :"
"keyword:`except` keyword, the except clause is executed, and then execution "
"continues after the :keyword:`try` statement."
msgstr ""
" Se ocorrer uma execução durante a execução da cláusula try, as instruções\n"
" remanescentes na cláusula são ignoradas. Se o tipo da exceção ocorrida "
"tiver\n"
" sido previsto em algum :keyword:`except`, então essa cláusula será\n"
" executada. Depois disso, a execução continua na próxima instrução após\n"
" o conjunto *try/except*."

#: ../../tutorial/errors.rst:109
msgid ""
"If an exception occurs which does not match the exception named in the "
"except clause, it is passed on to outer :keyword:`try` statements; if no "
"handler is found, it is an *unhandled exception* and execution stops with a "
"message as shown above."
msgstr ""
"Se a exceção levantada não foi prevista em nenhuma cláusula\n"
" :keyword:`except` da cláusula :keyword:`try` em que ocorreu, então ela é\n"
" entregue a uma instrução :keyword:`try` mais externa. Se não existir "
"nenhum\n"
" tratador previsto para tal exceção, será uma *exceção não tratada* e a\n"
" execução do programa termina com uma mensagem de erro."

#: ../../tutorial/errors.rst:114
msgid ""
"A :keyword:`try` statement may have more than one except clause, to specify "
"handlers for different exceptions.  At most one handler will be executed. "
"Handlers only handle exceptions that occur in the corresponding try clause, "
"not in other handlers of the same :keyword:`!try` statement.  An except "
"clause may name multiple exceptions as a parenthesized tuple, for example::"
msgstr ""

#: ../../tutorial/errors.rst:123
msgid ""
"A class in an :keyword:`except` clause is compatible with an exception if it "
"is the same class or a base class thereof (but not the other way around --- "
"an except clause listing a derived class is not compatible with a base "
"class).  For example, the following code will print B, C, D in that order::"
msgstr ""
"Uma classe em uma cláusula :keyword:`except` é compatível com uma exceção se "
"ela é da mesma classe ou de uma classe base desta (mas o contrário não é "
"válido --- uma cláusula de exceção listando uma classe derivada não é "
"compatível com uma classe base). Por exemplo, o seguinte código irá mostrar "
"B, C, D nesta ordem:: "

#: ../../tutorial/errors.rst:147
msgid ""
"Note that if the except clauses were reversed (with ``except B`` first), it "
"would have printed B, B, B --- the first matching except clause is triggered."
msgstr ""
"Se a ordem das cláusulas fosse invertida (``except B`` no início), seria\n"
"exibido B, B, B --- somente a primeira cláusula :keyword:`except` compatível "
"é\n"
"ativada."

#: ../../tutorial/errors.rst:150
msgid ""
"The last except clause may omit the exception name(s), to serve as a "
"wildcard. Use this with extreme caution, since it is easy to mask a real "
"programming error in this way!  It can also be used to print an error "
"message and then re-raise the exception (allowing a caller to handle the "
"exception as well)::"
msgstr ""
"A última cláusula :keyword:`except` pode omitir o nome da exceção, "
"funcionando\n"
"como um curinga. Utilize esse recurso com extrema cautela, uma vez que isso\n"
"pode esconder erros do programador e do usuário! Também pode ser utilizado\n"
"para exibir uma mensagem de erro e então re-levantar a exceção (permitindo "
"que\n"
"o invocador da função atual também possa tratá-la). ::"

#: ../../tutorial/errors.rst:169
msgid ""
"The :keyword:`try` ... :keyword:`except` statement has an optional *else "
"clause*, which, when present, must follow all except clauses.  It is useful "
"for code that must be executed if the try clause does not raise an "
"exception.  For example::"
msgstr ""
"A construção :keyword:`try` ... :keyword:`except` possui uma *cláusula "
"else*\n"
"opcional, que quando presente, deve ser colocada depois de todas as outras\n"
"cláusulas. É útil para um código que precisa ser executado se nenhuma "
"exceção\n"
"foi levantada. Por exemplo::"

#: ../../tutorial/errors.rst:183
msgid ""
"The use of the :keyword:`!else` clause is better than adding additional code "
"to the :keyword:`try` clause because it avoids accidentally catching an "
"exception that wasn't raised by the code being protected by the :keyword:`!"
"try` ... :keyword:`!except` statement."
msgstr ""

#: ../../tutorial/errors.rst:188
msgid ""
"When an exception occurs, it may have an associated value, also known as the "
"exception's *argument*. The presence and type of the argument depend on the "
"exception type."
msgstr ""
"Quando uma exceção ocorre, ela pode estar associada a um valor chamado\n"
"*argumento* da exceção. A presença e o tipo do argumento dependem do tipo "
"da\n"
"exceção."

#: ../../tutorial/errors.rst:192
msgid ""
"The except clause may specify a variable after the exception name.  The "
"variable is bound to an exception instance with the arguments stored in "
"``instance.args``.  For convenience, the exception instance defines :meth:"
"`__str__` so the arguments can be printed directly without having to "
"reference ``.args``.  One may also instantiate an exception first before "
"raising it and add any attributes to it as desired. ::"
msgstr ""
"A cláusula except pode especificar uma variável depois do nome (ou da tupla "
"de\n"
"nomes) da exceção. A variável é associada à instância de exceção capturada,\n"
"com os argumentos armazenados em ``instancia.args``. Por conveniência, a\n"
"instância define o método :meth:`__str__` para que os argumentos possam ser\n"
"exibidos diretamente sem necessidade de acessar ``.args``."

#: ../../tutorial/errors.rst:216
msgid ""
"If an exception has arguments, they are printed as the last part ('detail') "
"of the message for unhandled exceptions."
msgstr ""
"Caso uma exceção tenha argumentos, os mesmos serão impressos como a última "
"parte ('detalhe') da mensagem para as exceções não tratadas."

#: ../../tutorial/errors.rst:219
msgid ""
"Exception handlers don't just handle exceptions if they occur immediately in "
"the try clause, but also if they occur inside functions that are called "
"(even indirectly) in the try clause. For example::"
msgstr ""
"Além disso, tratadores de exceção são capazes de capturar exceções que "
"tenham\n"
"sido levantadas no interior de funções invocadas (mesmo que indiretamente) "
"na\n"
"cláusula try. Por exemplo::"

#: ../../tutorial/errors.rst:237
msgid "Raising Exceptions"
msgstr "Levantando exceções"

#: ../../tutorial/errors.rst:239
msgid ""
"The :keyword:`raise` statement allows the programmer to force a specified "
"exception to occur. For example::"
msgstr ""
"A instrução :keyword:`raise` permite ao programador forçar a ocorrência de "
"um\n"
"determinado tipo de exceção. Por exemplo::"

#: ../../tutorial/errors.rst:247
msgid ""
"The sole argument to :keyword:`raise` indicates the exception to be raised. "
"This must be either an exception instance or an exception class (a class "
"that derives from :class:`Exception`).  If an exception class is passed, it "
"will be implicitly instantiated by calling its constructor with no "
"arguments::"
msgstr ""
"O argumento de :keyword:`raise` indica a exceção a ser levantada. Esse\n"
"argumento deve ser uma instância de exceção ou uma classe de exceção (uma\n"
"classe que deriva de :class:`Exception`). Se uma classe de exceção for "
"passada, será implicitamente instanciada invocando o seu construtor sem "
"argumentos::"

#: ../../tutorial/errors.rst:254
msgid ""
"If you need to determine whether an exception was raised but don't intend to "
"handle it, a simpler form of the :keyword:`raise` statement allows you to re-"
"raise the exception::"
msgstr ""
"Caso você precise determinar se uma exceção foi levantada ou não, mas não "
"quer\n"
"manipular o erro, uma forma simples de instrução :keyword:`raise` permite "
"que\n"
"você levante-a novamente::"

#: ../../tutorial/errors.rst:273
msgid "User-defined Exceptions"
msgstr "Exceções definidas pelo usuário"

#: ../../tutorial/errors.rst:275
msgid ""
"Programs may name their own exceptions by creating a new exception class "
"(see :ref:`tut-classes` for more about Python classes).  Exceptions should "
"typically be derived from the :exc:`Exception` class, either directly or "
"indirectly."
msgstr ""
"Programas podem definir novos tipos de exceções, através da criação de uma\n"
"nova classe (veja :ref:`tut-classes` para mais informações sobre classes\n"
"Python). Exceções devem ser derivadas da classe :exc:`Exception`, direta ou\n"
"indiretamente. Por exemplo::"

#: ../../tutorial/errors.rst:279
msgid ""
"Exception classes can be defined which do anything any other class can do, "
"but are usually kept simple, often only offering a number of attributes that "
"allow information about the error to be extracted by handlers for the "
"exception.  When creating a module that can raise several distinct errors, a "
"common practice is to create a base class for exceptions defined by that "
"module, and subclass that to create specific exception classes for different "
"error conditions::"
msgstr ""
"Classes de exceções podem ser definidas para fazer qualquer coisa que\n"
"qualquer outra classe faz, mas em geral são bem simples, frequentemente\n"
"oferecendo apenas alguns atributos que fornecem informações sobre o erro "
"que\n"
"ocorreu. Ao criar um módulo que pode gerar diversos erros, uma prática comum "
"é\n"
"criar uma classe base para as exceções definidas por aquele módulo, e as\n"
"classes específicas para cada condição de erro como subclasses dela::"

#: ../../tutorial/errors.rst:317
msgid ""
"Most exceptions are defined with names that end in \"Error\", similar to the "
"naming of the standard exceptions."
msgstr ""

#: ../../tutorial/errors.rst:320
msgid ""
"Many standard modules define their own exceptions to report errors that may "
"occur in functions they define.  More information on classes is presented in "
"chapter :ref:`tut-classes`."
msgstr ""
"Muitos módulos padrão definem novas exceções para reportar erros que "
"ocorrem\n"
"no interior das funções que definem. Mais informações sobre classes "
"aparecem\n"
"no capítulo :ref:`tut-classes`."

#: ../../tutorial/errors.rst:328
msgid "Defining Clean-up Actions"
msgstr "Definindo ações de limpeza"

#: ../../tutorial/errors.rst:330
msgid ""
"The :keyword:`try` statement has another optional clause which is intended "
"to define clean-up actions that must be executed under all circumstances.  "
"For example::"
msgstr ""
"A instrução :keyword:`try` possui outra cláusula opcional, cuja finalidade "
"é\n"
"permitir a implementação de ações de limpeza, que sempre devem ser "
"executadas\n"
"independentemente da ocorrência de exceções. Como no exemplo::"

#: ../../tutorial/errors.rst:344
msgid ""
"A *finally clause* is always executed before leaving the :keyword:`try` "
"statement, whether an exception has occurred or not. When an exception has "
"occurred in the :keyword:`!try` clause and has not been handled by an :"
"keyword:`except` clause (or it has occurred in an :keyword:`!except` or :"
"keyword:`!else` clause), it is re-raised after the :keyword:`finally` clause "
"has been executed.  The :keyword:`!finally` clause is also executed \"on the "
"way out\" when any other clause of the :keyword:`!try` statement is left via "
"a :keyword:`break`, :keyword:`continue` or :keyword:`return` statement.  A "
"more complicated example::"
msgstr ""

#: ../../tutorial/errors.rst:377
msgid ""
"As you can see, the :keyword:`finally` clause is executed in any event.  "
"The :exc:`TypeError` raised by dividing two strings is not handled by the :"
"keyword:`except` clause and therefore re-raised after the :keyword:`!"
"finally` clause has been executed."
msgstr ""

#: ../../tutorial/errors.rst:382
msgid ""
"In real world applications, the :keyword:`finally` clause is useful for "
"releasing external resources (such as files or network connections), "
"regardless of whether the use of the resource was successful."
msgstr ""
"Em aplicação do mundo real, a cláusula :keyword:`finally` é útil para "
"liberar\n"
"recursos externos (como arquivos ou conexões de rede), independentemente do\n"
"uso do recurso ter sido bem sucedido ou não."

#: ../../tutorial/errors.rst:390
msgid "Predefined Clean-up Actions"
msgstr "Ações de limpeza predefinidas"

#: ../../tutorial/errors.rst:392
msgid ""
"Some objects define standard clean-up actions to be undertaken when the "
"object is no longer needed, regardless of whether or not the operation using "
"the object succeeded or failed. Look at the following example, which tries "
"to open a file and print its contents to the screen. ::"
msgstr ""
"Alguns objetos definem ações de limpeza padrões para serem executadas quando "
"o\n"
"objeto não é mais necessário, independentemente da operação que estava "
"usando\n"
"o objeto ter sido ou não bem sucedida. Veja o exemplo a seguir, que tenta\n"
"abrir um arquivo e exibir seu conteúdo na tela. ::"

#: ../../tutorial/errors.rst:400
msgid ""
"The problem with this code is that it leaves the file open for an "
"indeterminate amount of time after this part of the code has finished "
"executing. This is not an issue in simple scripts, but can be a problem for "
"larger applications. The :keyword:`with` statement allows objects like files "
"to be used in a way that ensures they are always cleaned up promptly and "
"correctly. ::"
msgstr ""
"O problema com esse código é que ele deixa o arquivo aberto um período\n"
"indeterminado depois que o código é executado. Isso não chega a ser "
"problema\n"
"em scripts simples, mas pode ser um problema para grandes aplicações. A\n"
"palavra reservada :keyword:`with` permite que objetos como arquivos sejam\n"
"utilizados com a certeza de que sempre serão prontamente e corretamente\n"
"finalizados. ::"

#: ../../tutorial/errors.rst:410
msgid ""
"After the statement is executed, the file *f* is always closed, even if a "
"problem was encountered while processing the lines. Objects which, like "
"files, provide predefined clean-up actions will indicate this in their "
"documentation."
msgstr ""
"Depois que a instrução é executada, o arquivo *a* é sempre fechado, mesmo "
"se\n"
"ocorrer um problema durante o processamento das linhas. Outros objetos que\n"
"fornecem ações de limpeza predefinidas as indicarão em suas documentações."
