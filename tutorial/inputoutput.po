# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2019, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Leticia Portella <leportella@gmail.com>, 2017
# Claudio Rogerio Carvalho Filho, 2017
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-01-01 10:14+0900\n"
"PO-Revision-Date: 2017-02-16 23:40+0000\n"
"Last-Translator: Claudio Rogerio Carvalho Filho, 2017\n"
"Language-Team: Portuguese (Brazil) (https://www.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

#: ../../tutorial/inputoutput.rst:5
msgid "Input and Output"
msgstr "Entrada e saída"

#: ../../tutorial/inputoutput.rst:7
msgid ""
"There are several ways to present the output of a program; data can be "
"printed in a human-readable form, or written to a file for future use. This "
"chapter will discuss some of the possibilities."
msgstr ""
"Existem várias maneiras de apresentar a saída de um programa; os dados "
"podem\n"
"ser exibidos ou impressos em forma legível para seres humanos, ou escritos "
"em\n"
"arquivos para uso posterior. Este capítulo apresenta algumas possibilidades."

#: ../../tutorial/inputoutput.rst:15
msgid "Fancier Output Formatting"
msgstr "Refinando a formatação de saída"

#: ../../tutorial/inputoutput.rst:17
msgid ""
"So far we've encountered two ways of writing values: *expression statements* "
"and the :func:`print` function.  (A third way is using the :meth:`write` "
"method of file objects; the standard output file can be referenced as ``sys."
"stdout``. See the Library Reference for more information on this.)"
msgstr ""
"Até agora vimos duas maneiras de exibir valores no console interativo:\n"
"escrevendo expressões e usando o comando :keyword:`print`. Em programas,\n"
"apenas o :keyword:`print` gera saída. (Uma outra maneira é utilizar o "
"método\n"
":meth:`write` de objetos arquivo; a saída padrão pode ser referenciada como\n"
"``sys.stdout``. Veja a Referência da Biblioteca Python para mais "
"informações\n"
"sobre isto.)"

#: ../../tutorial/inputoutput.rst:22
msgid ""
"Often you'll want more control over the formatting of your output than "
"simply printing space-separated values. There are several ways to format "
"output."
msgstr ""

#: ../../tutorial/inputoutput.rst:25
msgid ""
"To use :ref:`formatted string literals <tut-f-strings>`, begin a string with "
"``f`` or ``F`` before the opening quotation mark or triple quotation mark. "
"Inside this string, you can write a Python expression between ``{`` and ``}"
"`` characters that can refer to variables or literal values."
msgstr ""

#: ../../tutorial/inputoutput.rst:37
msgid ""
"The :meth:`str.format` method of strings requires more manual effort.  "
"You'll still use ``{`` and ``}`` to mark where a variable will be "
"substituted and can provide detailed formatting directives, but you'll also "
"need to provide the information to be formatted."
msgstr ""

#: ../../tutorial/inputoutput.rst:50
msgid ""
"Finally, you can do all the string handling yourself by using string slicing "
"and concatenation operations to create any layout you can imagine.  The "
"string type has some methods that perform useful operations for padding "
"strings to a given column width."
msgstr ""

#: ../../tutorial/inputoutput.rst:55
msgid ""
"When you don't need fancy output but just want a quick display of some "
"variables for debugging purposes, you can convert any value to a string with "
"the :func:`repr` or :func:`str` functions."
msgstr ""

#: ../../tutorial/inputoutput.rst:59
msgid ""
"The :func:`str` function is meant to return representations of values which "
"are fairly human-readable, while :func:`repr` is meant to generate "
"representations which can be read by the interpreter (or will force a :exc:"
"`SyntaxError` if there is no equivalent syntax).  For objects which don't "
"have a particular representation for human consumption, :func:`str` will "
"return the same value as :func:`repr`.  Many values, such as numbers or "
"structures like lists and dictionaries, have the same representation using "
"either function.  Strings, in particular, have two distinct representations."
msgstr ""
"A função :func:`str` serve para produzir representações de valores que "
"sejam\n"
"legíveis para as pessoas, enquanto :func:`repr` é para gerar representações\n"
"que o interpretador Python consegue ler (caso não exista uma forma de\n"
"representar o valor, a representação devolvida por :func:`repr` produz um\n"
":exc:`SyntaxError` [N.d.T. :func:`repr` procura gerar representações\n"
"fiéis; quando isso é inviável, é melhor encontrar um erro do que obter um\n"
"objeto diferente do original]). Para objetos que não têm uma representação\n"
"adequada para consumo humano, :func:`str` devolve o mesmo valor que\n"
":func:`repr`. Muitos valores, tal como inteiros e estruturas como listas e\n"
"dicionários, têm a mesma representação usando ambas funções. Strings e "
"números\n"
"de ponto flutuante, em particular, têm duas representações distintas."

#: ../../tutorial/inputoutput.rst:68
msgid "Some examples::"
msgstr "Alguns exemplos::"

#: ../../tutorial/inputoutput.rst:91
msgid ""
"The :mod:`string` module contains a :class:`~string.Template` class that "
"offers yet another way to substitute values into strings, using placeholders "
"like ``$x`` and replacing them with values from a dictionary, but offers "
"much less control of the formatting."
msgstr ""

#: ../../tutorial/inputoutput.rst:100
msgid "Formatted String Literals"
msgstr ""

#: ../../tutorial/inputoutput.rst:102
msgid ""
":ref:`Formatted string literals <f-strings>` (also called f-strings for "
"short) let you include the value of Python expressions inside a string by "
"prefixing the string with ``f`` or ``F`` and writing expressions as "
"``{expression}``."
msgstr ""

#: ../../tutorial/inputoutput.rst:107
msgid ""
"An optional format specifier can follow the expression. This allows greater "
"control over how the value is formatted. The following example rounds pi to "
"three places after the decimal::"
msgstr ""

#: ../../tutorial/inputoutput.rst:115
msgid ""
"Passing an integer after the ``':'`` will cause that field to be a minimum "
"number of characters wide.  This is useful for making columns line up. ::"
msgstr ""

#: ../../tutorial/inputoutput.rst:126
msgid ""
"Other modifiers can be used to convert the value before it is formatted. ``'!"
"a'`` applies :func:`ascii`, ``'!s'`` applies :func:`str`, and ``'!r'`` "
"applies :func:`repr`::"
msgstr ""

#: ../../tutorial/inputoutput.rst:136
msgid ""
"For a reference on these format specifications, see the reference guide for "
"the :ref:`formatspec`."
msgstr ""

#: ../../tutorial/inputoutput.rst:142
msgid "The String format() Method"
msgstr ""

#: ../../tutorial/inputoutput.rst:144
msgid "Basic usage of the :meth:`str.format` method looks like this::"
msgstr "Um uso básico do método :meth:`str.format` é assim::"

#: ../../tutorial/inputoutput.rst:149
msgid ""
"The brackets and characters within them (called format fields) are replaced "
"with the objects passed into the :meth:`str.format` method.  A number in the "
"brackets can be used to refer to the position of the object passed into the :"
"meth:`str.format` method. ::"
msgstr ""
"As chaves e seus conteúdos (chamados de campos de formatação) são "
"substituídos\n"
"pelos objetos passados para o método :meth:`str.format`, respeitando a "
"ordem\n"
"dos argumentos."

#: ../../tutorial/inputoutput.rst:159
msgid ""
"If keyword arguments are used in the :meth:`str.format` method, their values "
"are referred to by using the name of the argument. ::"
msgstr ""
"Se argumentos nomeados são passados para o método :meth:`str.format`, seus\n"
"valores pode ser identificados pelo nome do argumento::"

#: ../../tutorial/inputoutput.rst:166
msgid "Positional and keyword arguments can be arbitrarily combined::"
msgstr "Argumentos posicionais e nomeados podem ser combinados à vontade::"

#: ../../tutorial/inputoutput.rst:172
msgid ""
"If you have a really long format string that you don't want to split up, it "
"would be nice if you could reference the variables to be formatted by name "
"instead of by position.  This can be done by simply passing the dict and "
"using square brackets ``'[]'`` to access the keys ::"
msgstr ""
"Se você tem uma string de formatação muito longa que não deseja quebrar,\n"
"pode ser bom referir-se aos valores a serem formatados por nome em vez de\n"
"posição. Isto pode ser feito passando um dicionário usando colchetes ``[]``\n"
"para acessar as chaves::"

#: ../../tutorial/inputoutput.rst:182
msgid ""
"This could also be done by passing the table as keyword arguments with the "
"'**' notation. ::"
msgstr ""
"Isto também pode ser feito passando o dicionário como argumentos nomeados,\n"
"usando a notação ``**``::"

#: ../../tutorial/inputoutput.rst:189
msgid ""
"This is particularly useful in combination with the built-in function :func:"
"`vars`, which returns a dictionary containing all local variables."
msgstr ""
"Isto é particularmente útil em conjunto com a função embutida :func:`vars`,\n"
"que devolve um dicionário contendo todas as variáveis locais."

#: ../../tutorial/inputoutput.rst:192
msgid ""
"As an example, the following lines produce a tidily-aligned set of columns "
"giving integers and their squares and cubes::"
msgstr ""

#: ../../tutorial/inputoutput.rst:209
msgid ""
"For a complete overview of string formatting with :meth:`str.format`, see :"
"ref:`formatstrings`."
msgstr ""
"Para uma visão completa da formatação de strings com :meth:`str.format`, "
"veja\n"
"a seção :ref:`formatstrings` na Referência da Biblioteca Python."

#: ../../tutorial/inputoutput.rst:214
msgid "Manual String Formatting"
msgstr ""

#: ../../tutorial/inputoutput.rst:216
msgid "Here's the same table of squares and cubes, formatted manually::"
msgstr ""

#: ../../tutorial/inputoutput.rst:234
msgid ""
"(Note that the one space between each column was added by the way :func:"
"`print` works: it always adds spaces between its arguments.)"
msgstr ""

#: ../../tutorial/inputoutput.rst:237
msgid ""
"The :meth:`str.rjust` method of string objects right-justifies a string in a "
"field of a given width by padding it with spaces on the left. There are "
"similar methods :meth:`str.ljust` and :meth:`str.center`. These methods do "
"not write anything, they just return a new string. If the input string is "
"too long, they don't truncate it, but return it unchanged; this will mess up "
"your column lay-out but that's usually better than the alternative, which "
"would be lying about a value. (If you really want truncation you can always "
"add a slice operation, as in ``x.ljust(n)[:n]``.)"
msgstr ""

#: ../../tutorial/inputoutput.rst:246
msgid ""
"There is another method, :meth:`str.zfill`, which pads a numeric string on "
"the left with zeros.  It understands about plus and minus signs::"
msgstr ""
"Existe ainda o método :meth:`str.zfill` que preenche uma string numérica "
"com\n"
"zeros à esquerda. Ele sabe lidar com sinais positivos e negativos::"

#: ../../tutorial/inputoutput.rst:258
msgid "Old string formatting"
msgstr "Formatação de strings à moda antiga: operador ``%``"

#: ../../tutorial/inputoutput.rst:260
msgid ""
"The ``%`` operator can also be used for string formatting. It interprets the "
"left argument much like a :c:func:`sprintf`\\ -style format string to be "
"applied to the right argument, and returns the string resulting from this "
"formatting operation. For example::"
msgstr ""
"O operador ``%`` também pode ser usado para formatação de strings. Ele\n"
"interpreta o operando da esquerda de forma semelhante à função\n"
":c:func:`sprintf` da linguagem C, aplicando a formatação ao operando da\n"
"direita, e devolvendo a string resultante. Por exemplo::"

#: ../../tutorial/inputoutput.rst:269
msgid ""
"More information can be found in the :ref:`old-string-formatting` section."
msgstr ""

#: ../../tutorial/inputoutput.rst:275
msgid "Reading and Writing Files"
msgstr "Leitura e escrita de arquivos"

#: ../../tutorial/inputoutput.rst:281
msgid ""
":func:`open` returns a :term:`file object`, and is most commonly used with "
"two arguments: ``open(filename, mode)``."
msgstr ""
"A função :func:`open` devolve um objeto arquivo, e é frequentemente usada "
"com\n"
"dois argumentos: ``open(nome_do_arquivo, modo)``."

#: ../../tutorial/inputoutput.rst:293
msgid ""
"The first argument is a string containing the filename.  The second argument "
"is another string containing a few characters describing the way in which "
"the file will be used.  *mode* can be ``'r'`` when the file will only be "
"read, ``'w'`` for only writing (an existing file with the same name will be "
"erased), and ``'a'`` opens the file for appending; any data written to the "
"file is automatically added to the end.  ``'r+'`` opens the file for both "
"reading and writing. The *mode* argument is optional; ``'r'`` will be "
"assumed if it's omitted."
msgstr ""
"O primeiro argumento é uma string contendo o nome do arquivo. O segundo\n"
"argumento é outra string contendo alguns caracteres que descrevem o modo "
"como\n"
"o arquivo será usado. O parâmetro ``mode`` pode ser ``'r'`` quando o "
"arquivo\n"
"será apenas lido, ``'w'`` para escrever (se o arquivo já existir seu "
"conteúdo\n"
"prévio será apagado), e ``'a'`` para abrir o arquivo para adição; qualquer\n"
"escrita será adicionada ao final do arquivo. A opção ``'r+'`` abre o "
"arquivo\n"
"tanto para leitura como para escrita. O parâmetro ``mode`` é opcional, em "
"caso\n"
"de omissão será assumido ``'r'``."

#: ../../tutorial/inputoutput.rst:302
msgid ""
"Normally, files are opened in :dfn:`text mode`, that means, you read and "
"write strings from and to the file, which are encoded in a specific "
"encoding. If encoding is not specified, the default is platform dependent "
"(see :func:`open`). ``'b'`` appended to the mode opens the file in :dfn:"
"`binary mode`: now the data is read and written in the form of bytes "
"objects.  This mode should be used for all files that don't contain text."
msgstr ""

#: ../../tutorial/inputoutput.rst:309
msgid ""
"In text mode, the default when reading is to convert platform-specific line "
"endings (``\\n`` on Unix, ``\\r\\n`` on Windows) to just ``\\n``.  When "
"writing in text mode, the default is to convert occurrences of ``\\n`` back "
"to platform-specific line endings.  This behind-the-scenes modification to "
"file data is fine for text files, but will corrupt binary data like that in :"
"file:`JPEG` or :file:`EXE` files.  Be very careful to use binary mode when "
"reading and writing such files."
msgstr ""

#: ../../tutorial/inputoutput.rst:317
msgid ""
"It is good practice to use the :keyword:`with` keyword when dealing with "
"file objects.  The advantage is that the file is properly closed after its "
"suite finishes, even if an exception is raised at some point.  Using :"
"keyword:`!with` is also much shorter than writing equivalent :keyword:`try`"
"\\ -\\ :keyword:`finally` blocks::"
msgstr ""

#: ../../tutorial/inputoutput.rst:328
msgid ""
"If you're not using the :keyword:`with` keyword, then you should call ``f."
"close()`` to close the file and immediately free up any system resources "
"used by it. If you don't explicitly close a file, Python's garbage collector "
"will eventually destroy the object and close the open file for you, but the "
"file may stay open for a while.  Another risk is that different Python "
"implementations will do this clean-up at different times."
msgstr ""

#: ../../tutorial/inputoutput.rst:336
msgid ""
"After a file object is closed, either by a :keyword:`with` statement or by "
"calling ``f.close()``, attempts to use the file object will automatically "
"fail. ::"
msgstr ""

#: ../../tutorial/inputoutput.rst:350
msgid "Methods of File Objects"
msgstr "Métodos de objetos arquivo"

#: ../../tutorial/inputoutput.rst:352
msgid ""
"The rest of the examples in this section will assume that a file object "
"called ``f`` has already been created."
msgstr ""
"Para simplificar, o resto dos exemplos nesta seção assumem que um objeto\n"
"arquivo chamado ``f`` já foi criado."

#: ../../tutorial/inputoutput.rst:355
msgid ""
"To read a file's contents, call ``f.read(size)``, which reads some quantity "
"of data and returns it as a string (in text mode) or bytes object (in binary "
"mode). *size* is an optional numeric argument.  When *size* is omitted or "
"negative, the entire contents of the file will be read and returned; it's "
"your problem if the file is twice as large as your machine's memory. "
"Otherwise, at most *size* bytes are read and returned. If the end of the "
"file has been reached, ``f.read()`` will return an empty string (``''``).  ::"
msgstr ""
"Para ler o conteúdo de um arquivo, invoque ``f.read(size)``, que lê um "
"punhado\n"
"de dados devolvendo-os como uma string de bytes ``str``. O argumento "
"numérico\n"
"*size* é opcional. Quando *size* é omitido ou negativo, todo o conteúdo do\n"
"arquivo é lido e devolvido; se o arquivo é duas vezes maior que memória da\n"
"máquina, o problema é seu. Caso contrário, no máximo *size* bytes serão "
"lidos\n"
"e devolvidos. Se o fim do arquivo for atingido, ``f.read()`` devolve uma\n"
"string vazia (``\"\"``). ::"

#: ../../tutorial/inputoutput.rst:369
msgid ""
"``f.readline()`` reads a single line from the file; a newline character (``"
"\\n``) is left at the end of the string, and is only omitted on the last "
"line of the file if the file doesn't end in a newline.  This makes the "
"return value unambiguous; if ``f.readline()`` returns an empty string, the "
"end of the file has been reached, while a blank line is represented by "
"``'\\n'``, a string containing only a single newline.  ::"
msgstr ""
"O método ``f.readline()`` lê uma única linha do arquivo; o caractere de "
"quebra\n"
"de linha (``'\\n'``) é mantido ao final da string, só não ocorrendo na "
"última\n"
"linha do arquivo, se ela não termina com uma quebra de linha. Isso elimina "
"a\n"
"ambiguidade do valor devolvido; se ``f.readline()`` devolver uma string "
"vazia,\n"
"então é certo que arquivo acabou. Linhas em branco são representadas por um\n"
"``'\\n'`` -- uma string contendo apenas o terminador de linha. ::"

#: ../../tutorial/inputoutput.rst:383
msgid ""
"For reading lines from a file, you can loop over the file object. This is "
"memory efficient, fast, and leads to simple code::"
msgstr ""
"Uma maneira alternativa de ler linhas do arquivo é iterar diretamente pelo "
"objeto arquivo. É eficiente, rápido e resulta em código mais simples::"

#: ../../tutorial/inputoutput.rst:392
msgid ""
"If you want to read all the lines of a file in a list you can also use "
"``list(f)`` or ``f.readlines()``."
msgstr ""

#: ../../tutorial/inputoutput.rst:395
msgid ""
"``f.write(string)`` writes the contents of *string* to the file, returning "
"the number of characters written. ::"
msgstr ""

#: ../../tutorial/inputoutput.rst:401
msgid ""
"Other types of objects need to be converted -- either to a string (in text "
"mode) or a bytes object (in binary mode) -- before writing them::"
msgstr ""

#: ../../tutorial/inputoutput.rst:409
msgid ""
"``f.tell()`` returns an integer giving the file object's current position in "
"the file represented as number of bytes from the beginning of the file when "
"in binary mode and an opaque number when in text mode."
msgstr ""

#: ../../tutorial/inputoutput.rst:413
msgid ""
"To change the file object's position, use ``f.seek(offset, from_what)``.  "
"The position is computed from adding *offset* to a reference point; the "
"reference point is selected by the *from_what* argument.  A *from_what* "
"value of 0 measures from the beginning of the file, 1 uses the current file "
"position, and 2 uses the end of the file as the reference point.  "
"*from_what* can be omitted and defaults to 0, using the beginning of the "
"file as the reference point. ::"
msgstr ""

#: ../../tutorial/inputoutput.rst:432
msgid ""
"In text files (those opened without a ``b`` in the mode string), only seeks "
"relative to the beginning of the file are allowed (the exception being "
"seeking to the very file end with ``seek(0, 2)``) and the only valid "
"*offset* values are those returned from the ``f.tell()``, or zero. Any other "
"*offset* value produces undefined behaviour."
msgstr ""

#: ../../tutorial/inputoutput.rst:438
msgid ""
"File objects have some additional methods, such as :meth:`~file.isatty` and :"
"meth:`~file.truncate` which are less frequently used; consult the Library "
"Reference for a complete guide to file objects."
msgstr ""
"Objetos arquivo têm métodos adicionais, como :meth:`~file.isatty` e\n"
":meth:`~file.truncate` que são usados com menos frequência; consulte a\n"
"Referência da Biblioteca Python para mais informações."

#: ../../tutorial/inputoutput.rst:446
msgid "Saving structured data with :mod:`json`"
msgstr ""

#: ../../tutorial/inputoutput.rst:450
msgid ""
"Strings can easily be written to and read from a file.  Numbers take a bit "
"more effort, since the :meth:`read` method only returns strings, which will "
"have to be passed to a function like :func:`int`, which takes a string like "
"``'123'`` and returns its numeric value 123.  When you want to save more "
"complex data types like nested lists and dictionaries, parsing and "
"serializing by hand becomes complicated."
msgstr ""

#: ../../tutorial/inputoutput.rst:457
msgid ""
"Rather than having users constantly writing and debugging code to save "
"complicated data types to files, Python allows you to use the popular data "
"interchange format called `JSON (JavaScript Object Notation) <http://json."
"org>`_.  The standard module called :mod:`json` can take Python data "
"hierarchies, and convert them to string representations; this process is "
"called :dfn:`serializing`.  Reconstructing the data from the string "
"representation is called :dfn:`deserializing`.  Between serializing and "
"deserializing, the string representing the object may have been stored in a "
"file or data, or sent over a network connection to some distant machine."
msgstr ""

#: ../../tutorial/inputoutput.rst:468
msgid ""
"The JSON format is commonly used by modern applications to allow for data "
"exchange.  Many programmers are already familiar with it, which makes it a "
"good choice for interoperability."
msgstr ""

#: ../../tutorial/inputoutput.rst:472
msgid ""
"If you have an object ``x``, you can view its JSON string representation "
"with a simple line of code::"
msgstr ""

#: ../../tutorial/inputoutput.rst:479
msgid ""
"Another variant of the :func:`~json.dumps` function, called :func:`~json."
"dump`, simply serializes the object to a :term:`text file`.  So if ``f`` is "
"a :term:`text file` object opened for writing, we can do this::"
msgstr ""

#: ../../tutorial/inputoutput.rst:485
msgid ""
"To decode the object again, if ``f`` is a :term:`text file` object which has "
"been opened for reading::"
msgstr ""

#: ../../tutorial/inputoutput.rst:490
msgid ""
"This simple serialization technique can handle lists and dictionaries, but "
"serializing arbitrary class instances in JSON requires a bit of extra "
"effort. The reference for the :mod:`json` module contains an explanation of "
"this."
msgstr ""

#: ../../tutorial/inputoutput.rst:496
msgid ":mod:`pickle` - the pickle module"
msgstr "O módulo :mod:`pickle`"

#: ../../tutorial/inputoutput.rst:498
msgid ""
"Contrary to :ref:`JSON <tut-json>`, *pickle* is a protocol which allows the "
"serialization of arbitrarily complex Python objects.  As such, it is "
"specific to Python and cannot be used to communicate with applications "
"written in other languages.  It is also insecure by default: deserializing "
"pickle data coming from an untrusted source can execute arbitrary code, if "
"the data was crafted by a skilled attacker."
msgstr ""
