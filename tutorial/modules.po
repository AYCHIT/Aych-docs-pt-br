# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2019, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Tiago Henrique <tiagohrm@gmail.com>, 2017
# Claudio Rogerio Carvalho Filho, 2017
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-01 11:19+0900\n"
"PO-Revision-Date: 2017-02-16 23:41+0000\n"
"Last-Translator: Claudio Rogerio Carvalho Filho, 2017\n"
"Language-Team: Portuguese (Brazil) (https://www.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

#: ../../tutorial/modules.rst:5
msgid "Modules"
msgstr "Módulos"

#: ../../tutorial/modules.rst:7
msgid ""
"If you quit from the Python interpreter and enter it again, the definitions "
"you have made (functions and variables) are lost. Therefore, if you want to "
"write a somewhat longer program, you are better off using a text editor to "
"prepare the input for the interpreter and running it with that file as input "
"instead.  This is known as creating a *script*.  As your program gets "
"longer, you may want to split it into several files for easier maintenance.  "
"You may also want to use a handy function that you've written in several "
"programs without copying its definition into each program."
msgstr ""
"Se você sair do interpretador Python e entrar de novo, as definições que "
"você criou(funções e variáveis) serão perdidas. Portanto, se você quiser "
"escrever um longo programa, será mais eficiente usar um editor de texto para "
"preparar as entradas do interpretador e executá-lo usando o arquivo para "
"inserir as entradas. Isso é conhecido como criar um *script*. Se o seu "
"programa se torna longo, talvez você queira dividi-lo em arquivos menores "
"para facilitar sua manutenção. Você também pode preferir usar uma função "
"útil que você escreveu em vários programas diferentes sem copiar a definição "
"de função em cada programa."

#: ../../tutorial/modules.rst:16
msgid ""
"To support this, Python has a way to put definitions in a file and use them "
"in a script or in an interactive instance of the interpreter. Such a file is "
"called a *module*; definitions from a module can be *imported* into other "
"modules or into the *main* module (the collection of variables that you have "
"access to in a script executed at the top level and in calculator mode)."
msgstr ""
"Para permitir isso, Python tem uma maneira de colocar definições em um "
"arquivo e\n"
"e então usá-las em um script ou em uma execução interativa no interpretador. "
"Tal\n"
"arquivo é chamado de \"módulo\"; definições de um módulo podem ser "
"*importadas*\n"
"em outros módulos ou no módulo *principal* (a coleção de variáveis a que "
"você\n"
"tem acesso no nível mais externo de um script executado como um programa, ou "
"no\n"
"modo calculadora)."

#: ../../tutorial/modules.rst:22
msgid ""
"A module is a file containing Python definitions and statements.  The file "
"name is the module name with the suffix :file:`.py` appended.  Within a "
"module, the module's name (as a string) is available as the value of the "
"global variable ``__name__``.  For instance, use your favorite text editor "
"to create a file called :file:`fibo.py` in the current directory with the "
"following contents::"
msgstr ""
"Um arquivo de módulo contém definições e comandos. O nome do arquivo será o "
"nome do módulo com o sufixo:arquivo:`.py` no final. Dentro de um módulo,  o "
"nome do módulo (como uma string) é disponível como o valor da variável  "
"global`` __name__``. Por exemplo, use seu editor de texto favorito para "
"criar um arquivo chamado:arquivo: `fibo.py` no diretório atual com o "
"seguinte conteúdo ::"

#: ../../tutorial/modules.rst:45
msgid ""
"Now enter the Python interpreter and import this module with the following "
"command::"
msgstr ""
"Agora entre no interpretador Python e importe o módulo com o seguinte "
"comando::"

#: ../../tutorial/modules.rst:50
msgid ""
"This does not enter the names of the functions defined in ``fibo``  directly "
"in the current symbol table; it only enters the module name ``fibo`` there. "
"Using the module name you can access the functions::"
msgstr ""
"Isso não coloca os nomes das funções definidas em ``fibo`` diretamente na "
"tabela\n"
"de símbolos atual; isso coloca somente o nome do módulo ``fibo``. Usando o "
"nome\n"
"do módulo você pode acessar as funções."

#: ../../tutorial/modules.rst:61
msgid ""
"If you intend to use a function often you can assign it to a local name::"
msgstr ""
"Se você pretende usar uma função muitas vezes você pode atribui-lá a um nome "
"local::"

#: ../../tutorial/modules.rst:71
msgid "More on Modules"
msgstr "Mais sobre Módulos"

#: ../../tutorial/modules.rst:73
msgid ""
"A module can contain executable statements as well as function definitions. "
"These statements are intended to initialize the module. They are executed "
"only the *first* time the module name is encountered in an import statement. "
"[#]_ (They are also run if the file is executed as a script.)"
msgstr ""
"Um módulo pode conter tanto comandos quanto definições de funções e "
"classes.\n"
"Esses comandos servem para inicializar o módulo. Eles são executados somente "
"na\n"
"*primeira* vez que o módulo é importado em algum lugar. [#]_"

#: ../../tutorial/modules.rst:78
msgid ""
"Each module has its own private symbol table, which is used as the global "
"symbol table by all functions defined in the module. Thus, the author of a "
"module can use global variables in the module without worrying about "
"accidental clashes with a user's global variables. On the other hand, if you "
"know what you are doing you can touch a module's global variables with the "
"same notation used to refer to its functions, ``modname.itemname``."
msgstr ""
"Cada módulo tem sua própria tabela de símbolos privada, que é usada como\n"
"tabela de símbolos global para todas as funções definidas no módulo. Assim, "
"o\n"
"autor de um módulo pode usar variáveis globais no seu módulo sem se "
"preocupar\n"
"com conflitos acidentais com as variáveis globais do usuário. Por outro "
"lado,\n"
"se você precisar usar uma variável global de um módulo, poderá fazê-lo com "
"a\n"
"mesma notação usada para se referir às suas funções,\n"
"``nome_do_modulo.nome_do_item``."

#: ../../tutorial/modules.rst:85
msgid ""
"Modules can import other modules.  It is customary but not required to place "
"all :keyword:`import` statements at the beginning of a module (or script, "
"for that matter).  The imported module names are placed in the importing "
"module's global symbol table."
msgstr ""
"Módulos podem importar outros módulos. É costume, porém não obrigatório, "
"colocar\n"
"todos os comandos :keyword:`import` no início do módulo (ou script).\n"
"se preferir). As definições do módulo importado são colocadas na tabela\n"
"de símbolos global do módulo que faz a importação."

#: ../../tutorial/modules.rst:90
msgid ""
"There is a variant of the :keyword:`import` statement that imports names "
"from a module directly into the importing module's symbol table.  For "
"example::"
msgstr ""
"Existe uma variante do comando :keyword:`import` que importa definições de "
"um\n"
"módulo diretamente para a tabela de símbolos do módulo importador. Por "
"exemplo::"

#: ../../tutorial/modules.rst:97
msgid ""
"This does not introduce the module name from which the imports are taken in "
"the local symbol table (so in the example, ``fibo`` is not defined)."
msgstr ""
"Isso não coloca o nome do módulo de onde foram feitas as importações para a\n"
"tabela de símbolos local (assim, no exemplo ``fibo`` não está definido), "
"mas\n"
"somente o nome das funções ``fib`` e ``fib2``."

#: ../../tutorial/modules.rst:100
msgid "There is even a variant to import all names that a module defines::"
msgstr ""
"Existe ainda uma variante que importa todos os nomes definidos em um módulo::"

#: ../../tutorial/modules.rst:106
msgid ""
"This imports all names except those beginning with an underscore (``_``). In "
"most cases Python programmers do not use this facility since it introduces "
"an unknown set of names into the interpreter, possibly hiding some things "
"you have already defined."
msgstr ""
"Isso importa todos as declarações de nomes, exceto aqueles que iniciam com "
"um\n"
"sublinhado (``_``). Na maioria dos casos, programadores Python não usam "
"esta\n"
"facilidade porque ela introduz um conjunto desconhecido de nomes no "
"ambiente,\n"
"podendo esconder outros nomes previamente definidos."

#: ../../tutorial/modules.rst:111
msgid ""
"Note that in general the practice of importing ``*`` from a module or "
"package is frowned upon, since it often causes poorly readable code. "
"However, it is okay to use it to save typing in interactive sessions."
msgstr ""
"Note que, em geral, a prática do ``import *`` de um módulo ou pacote é\n"
"desaprovada, uma vez que muitas vezes dificulta a leitura do código. "
"Contudo,\n"
"é aceitável para diminuir a digitação em sessões interativas."

#: ../../tutorial/modules.rst:115
msgid ""
"If the module name is followed by :keyword:`!as`, then the name following :"
"keyword:`!as` is bound directly to the imported module."
msgstr ""

#: ../../tutorial/modules.rst:124
msgid ""
"This is effectively importing the module in the same way that ``import "
"fibo`` will do, with the only difference of it being available as ``fib``."
msgstr ""

#: ../../tutorial/modules.rst:127
msgid ""
"It can also be used when utilising :keyword:`from` with similar effects::"
msgstr ""

#: ../../tutorial/modules.rst:136
msgid ""
"For efficiency reasons, each module is only imported once per interpreter "
"session.  Therefore, if you change your modules, you must restart the "
"interpreter -- or, if it's just one module you want to test interactively, "
"use :func:`importlib.reload`, e.g. ``import importlib; importlib."
"reload(modulename)``."
msgstr ""
" Por razões de eficiência, cada módulo é importado somente uma vez por "
"sessão\n"
" do interpretador. Portanto, se você alterar seus módulos, você deve "
"reiniciar\n"
" o interpretador -- ou, se é somente um módulo que você quer testar\n"
" interativamente, use :func:`reload`, ex. ``reload(nome_do_modulo)``."

#: ../../tutorial/modules.rst:146
msgid "Executing modules as scripts"
msgstr "Executando módulos como scripts"

#: ../../tutorial/modules.rst:148
msgid "When you run a Python module with ::"
msgstr "Quando você executa um módulo do python com ::"

#: ../../tutorial/modules.rst:152
msgid ""
"the code in the module will be executed, just as if you imported it, but "
"with the ``__name__`` set to ``\"__main__\"``.  That means that by adding "
"this code at the end of your module::"
msgstr ""
"o código no módulo será executado, apenas se você importátolo, mas com o "
"``__name__`` mudado para ``\"__main__\"``. Isto significa que adicionando "
"este código ao final do seu módulo::"

#: ../../tutorial/modules.rst:160
msgid ""
"you can make the file usable as a script as well as an importable module, "
"because the code that parses the command line only runs if the module is "
"executed as the \"main\" file:"
msgstr ""

#: ../../tutorial/modules.rst:169
msgid "If the module is imported, the code is not run::"
msgstr ""

#: ../../tutorial/modules.rst:174
msgid ""
"This is often used either to provide a convenient user interface to a "
"module, or for testing purposes (running the module as a script executes a "
"test suite)."
msgstr ""
"Isso é frequentemente usado para fornecer interface de usuário conveniente\n"
"para um módulo, ou para realizar testes (rodando o módulo como um script,\n"
"uma suíte de testes é executada)."

#: ../../tutorial/modules.rst:181
msgid "The Module Search Path"
msgstr "O caminho de busca dos módulos"

#: ../../tutorial/modules.rst:185
msgid ""
"When a module named :mod:`spam` is imported, the interpreter first searches "
"for a built-in module with that name. If not found, it then searches for a "
"file named :file:`spam.py` in a list of directories given by the variable :"
"data:`sys.path`.  :data:`sys.path` is initialized from these locations:"
msgstr ""
"Quando um módulo chamado :mod:`spam` é importado, o interpretador procura "
"um\n"
"módulo embutido com este nome. Se não existe, procura um arquivo chamado\n"
":file:`spam.py` em uma lista de diretórios incluídos na variável\n"
":data:`sys.path`, que é inicializada com estes locais:"

#: ../../tutorial/modules.rst:190
msgid ""
"The directory containing the input script (or the current directory when no "
"file is specified)."
msgstr " o diretório que contém o script importador (ou o diretório atual)."

#: ../../tutorial/modules.rst:192
msgid ""
":envvar:`PYTHONPATH` (a list of directory names, with the same syntax as the "
"shell variable :envvar:`PATH`)."
msgstr ""
"a variável de ambiente :envvar:`PYTHONPATH` (uma lista de nomes de\n"
" diretórios, com a mesma sintaxe da variável de ambiente :envvar:`PATH`)."

#: ../../tutorial/modules.rst:194
msgid "The installation-dependent default."
msgstr ""

#: ../../tutorial/modules.rst:197
msgid ""
"On file systems which support symlinks, the directory containing the input "
"script is calculated after the symlink is followed. In other words the "
"directory containing the symlink is **not** added to the module search path."
msgstr ""

#: ../../tutorial/modules.rst:201
msgid ""
"After initialization, Python programs can modify :data:`sys.path`.  The "
"directory containing the script being run is placed at the beginning of the "
"search path, ahead of the standard library path. This means that scripts in "
"that directory will be loaded instead of modules of the same name in the "
"library directory. This is an error unless the replacement is intended.  See "
"section :ref:`tut-standardmodules` for more information."
msgstr ""
"Após a inicialização, programas Python podem modificar :data:`sys.path`. O\n"
"diretório que contém o script sendo executado é colocado no início da lista\n"
"de caminhos, à frente do caminho da biblioteca padrão. Isto significa que\n"
"módulos nesse diretório serão carregados no lugar de módulos com o mesmo "
"nome\n"
"na biblioteca padrão. Isso costuma ser um erro, a menos que seja "
"intencional.\n"
"Veja a seção :ref:`tut-standardmodules` para mais informações."

#: ../../tutorial/modules.rst:212
msgid "\"Compiled\" Python files"
msgstr "Arquivos Python \"compilados\""

#: ../../tutorial/modules.rst:214
msgid ""
"To speed up loading modules, Python caches the compiled version of each "
"module in the ``__pycache__`` directory under the name :file:`module."
"{version}.pyc`, where the version encodes the format of the compiled file; "
"it generally contains the Python version number.  For example, in CPython "
"release 3.3 the compiled version of spam.py would be cached as ``__pycache__/"
"spam.cpython-33.pyc``.  This naming convention allows compiled modules from "
"different releases and different versions of Python to coexist."
msgstr ""

#: ../../tutorial/modules.rst:222
msgid ""
"Python checks the modification date of the source against the compiled "
"version to see if it's out of date and needs to be recompiled.  This is a "
"completely automatic process.  Also, the compiled modules are platform-"
"independent, so the same library can be shared among systems with different "
"architectures."
msgstr ""

#: ../../tutorial/modules.rst:227
msgid ""
"Python does not check the cache in two circumstances.  First, it always "
"recompiles and does not store the result for the module that's loaded "
"directly from the command line.  Second, it does not check the cache if "
"there is no source module.  To support a non-source (compiled only) "
"distribution, the compiled module must be in the source directory, and there "
"must not be a source module."
msgstr ""

#: ../../tutorial/modules.rst:234
msgid "Some tips for experts:"
msgstr "Algumas dicas para os experts:"

#: ../../tutorial/modules.rst:236
msgid ""
"You can use the :option:`-O` or :option:`-OO` switches on the Python command "
"to reduce the size of a compiled module.  The ``-O`` switch removes assert "
"statements, the ``-OO`` switch removes both assert statements and __doc__ "
"strings.  Since some programs may rely on having these available, you should "
"only use this option if you know what you're doing.  \"Optimized\" modules "
"have an ``opt-`` tag and are usually smaller.  Future releases may change "
"the effects of optimization."
msgstr ""

#: ../../tutorial/modules.rst:244
msgid ""
"A program doesn't run any faster when it is read from a ``.pyc`` file than "
"when it is read from a ``.py`` file; the only thing that's faster about ``."
"pyc`` files is the speed with which they are loaded."
msgstr ""

#: ../../tutorial/modules.rst:248
msgid ""
"The module :mod:`compileall` can create .pyc files for all modules in a "
"directory."
msgstr ""

#: ../../tutorial/modules.rst:251
msgid ""
"There is more detail on this process, including a flow chart of the "
"decisions, in :pep:`3147`."
msgstr ""

#: ../../tutorial/modules.rst:258
msgid "Standard Modules"
msgstr "Módulos padrão"

#: ../../tutorial/modules.rst:262
msgid ""
"Python comes with a library of standard modules, described in a separate "
"document, the Python Library Reference (\"Library Reference\" hereafter).  "
"Some modules are built into the interpreter; these provide access to "
"operations that are not part of the core of the language but are "
"nevertheless built in, either for efficiency or to provide access to "
"operating system primitives such as system calls.  The set of such modules "
"is a configuration option which also depends on the underlying platform.  "
"For example, the :mod:`winreg` module is only provided on Windows systems. "
"One particular module deserves some attention: :mod:`sys`, which is built "
"into every Python interpreter.  The variables ``sys.ps1`` and ``sys.ps2`` "
"define the strings used as primary and secondary prompts::"
msgstr ""
"Python possui uma biblioteca padrão de módulos, descrita em um documento em\n"
"separado, a Python Library Reference (doravante “Library Reference”). "
"Alguns\n"
"módulos estão embutidos no interpretador; estes possibilitam acesso a\n"
"operações que não são parte do núcleo da linguagem, mas estão no "
"interpretador\n"
"seja por eficiência ou para permitir o acesso a chamadas do sistema\n"
"operacional. O conjunto destes módulos é uma opção de configuração que "
"depende\n"
"também da plataforma subjacente. Por exemplo, o módulo :mod:`winreg` só "
"está\n"
"disponível em sistemas Windows. Existe um módulo que requer especial "
"atenção:\n"
":mod:`sys`, que é embutido em qualquer interpretador Python. As variáveis\n"
"``sys.ps1`` e ``sys.ps2`` definem as strings utilizadas como prompt primário "
"e\n"
"secundário::"

#: ../../tutorial/modules.rst:285
msgid ""
"These two variables are only defined if the interpreter is in interactive "
"mode."
msgstr ""
"Essas variáveis só estão definidas se o interpretador está em modo "
"interativo."

#: ../../tutorial/modules.rst:287
msgid ""
"The variable ``sys.path`` is a list of strings that determines the "
"interpreter's search path for modules. It is initialized to a default path "
"taken from the environment variable :envvar:`PYTHONPATH`, or from a built-in "
"default if :envvar:`PYTHONPATH` is not set.  You can modify it using "
"standard list operations::"
msgstr ""
"A variável ``sys.path`` contém uma lista de strings que determina os "
"caminhos\n"
"de busca de módulos conhecidos pelo interpretador. Ela é inicializada para "
"um\n"
"caminho padrão determinado pela variável de ambiente :envvar:`PYTHONPATH`, "
"ou\n"
"por um valor default interno se a variável não estiver definida. Você pode\n"
"modificar ``sys.path`` com as operações típicas de lista, por exemplo::"

#: ../../tutorial/modules.rst:300
msgid "The :func:`dir` Function"
msgstr "A função :func:`dir`"

#: ../../tutorial/modules.rst:302
msgid ""
"The built-in function :func:`dir` is used to find out which names a module "
"defines.  It returns a sorted list of strings::"
msgstr ""
"A função embutida :func:`dir` é usada para se descobrir quais nomes são\n"
"definidos por um módulo. Ela devolve uma lista ordenada de strings::"

#: ../../tutorial/modules.rst:327
msgid ""
"Without arguments, :func:`dir` lists the names you have defined currently::"
msgstr "Sem argumentos, :func:`dir` lista os nomes atualmente definidos:"

#: ../../tutorial/modules.rst:335
msgid ""
"Note that it lists all types of names: variables, modules, functions, etc."
msgstr ""
"Observe que ela lista todo tipo de nomes: variáveis, módulos, funções, etc."

#: ../../tutorial/modules.rst:339
msgid ""
":func:`dir` does not list the names of built-in functions and variables.  If "
"you want a list of those, they are defined in the standard module :mod:"
"`builtins`::"
msgstr ""

#: ../../tutorial/modules.rst:378
msgid "Packages"
msgstr "Pacotes"

#: ../../tutorial/modules.rst:380
msgid ""
"Packages are a way of structuring Python's module namespace by using "
"\"dotted module names\".  For example, the module name :mod:`A.B` designates "
"a submodule named ``B`` in a package named ``A``.  Just like the use of "
"modules saves the authors of different modules from having to worry about "
"each other's global variable names, the use of dotted module names saves the "
"authors of multi-module packages like NumPy or Pillow from having to worry "
"about each other's module names."
msgstr ""

#: ../../tutorial/modules.rst:388
msgid ""
"Suppose you want to design a collection of modules (a \"package\") for the "
"uniform handling of sound files and sound data.  There are many different "
"sound file formats (usually recognized by their extension, for example: :"
"file:`.wav`, :file:`.aiff`, :file:`.au`), so you may need to create and "
"maintain a growing collection of modules for the conversion between the "
"various file formats. There are also many different operations you might "
"want to perform on sound data (such as mixing, adding echo, applying an "
"equalizer function, creating an artificial stereo effect), so in addition "
"you will be writing a never-ending stream of modules to perform these "
"operations.  Here's a possible structure for your package (expressed in "
"terms of a hierarchical filesystem):"
msgstr ""
"Suponha que você queira projetar uma coleção de módulos (um \"pacote\") para "
"o\n"
"gerenciamento uniforme de arquivos de som. Existem muitos formatos "
"diferentes\n"
"(normalmente identificados pela extensão do nome de arquivo, por exemplo.\n"
":file:`.wav`, :file:`.aiff`, :file:`.au`), de forma que você pode precisar\n"
"criar e manter uma crescente coleção de módulos de conversão entre "
"formatos.\n"
"Ainda podem existir muitas operações diferentes passíveis de aplicação "
"sobre\n"
"os arquivos de som (mixagem, eco, equalização, efeito stereo artificial).\n"
"Logo, possivelmente você também estará escrevendo uma coleção sempre "
"crescente\n"
"de módulos para aplicar estas operações. Eis uma possível estrutura para\n"
"o seu pacote (expressa em termos de um sistema de arquivos hierárquico)::"

#: ../../tutorial/modules.rst:425
msgid ""
"When importing the package, Python searches through the directories on ``sys."
"path`` looking for the package subdirectory."
msgstr ""
"Ao importar esse pacote, Python busca pelo subdiretório com mesmo nome nos "
"diretórios\n"
"listados em ``sys.path``."

#: ../../tutorial/modules.rst:428
msgid ""
"The :file:`__init__.py` files are required to make Python treat directories "
"containing the file as packages.  This prevents directories with a common "
"name, such as ``string``, unintentionally hiding valid modules that occur "
"later on the module search path. In the simplest case, :file:`__init__.py` "
"can just be an empty file, but it can also execute initialization code for "
"the package or set the ``__all__`` variable, described later."
msgstr ""

#: ../../tutorial/modules.rst:435
msgid ""
"Users of the package can import individual modules from the package, for "
"example::"
msgstr "Usuários do pacote podem importar módulos individuais, por exemplo::"

#: ../../tutorial/modules.rst:440
msgid ""
"This loads the submodule :mod:`sound.effects.echo`.  It must be referenced "
"with its full name. ::"
msgstr ""
"Isso carrega o submódulo :mod:`sound.effects.echo`. Ele deve ser "
"referenciado com\n"
"seu nome completo, como em::"

#: ../../tutorial/modules.rst:445
msgid "An alternative way of importing the submodule is::"
msgstr "Uma maneira alternativa para a importação desse módulo é::"

#: ../../tutorial/modules.rst:449
msgid ""
"This also loads the submodule :mod:`echo`, and makes it available without "
"its package prefix, so it can be used as follows::"
msgstr ""
"Isso carrega o submódulo :mod:`echo` sem necessidade de mencionar o prefixo "
"do\n"
"pacote no momento da utilização, assim::"

#: ../../tutorial/modules.rst:454
msgid ""
"Yet another variation is to import the desired function or variable "
"directly::"
msgstr "Também é possível importar diretamente uma única variável ou função::"

#: ../../tutorial/modules.rst:458
msgid ""
"Again, this loads the submodule :mod:`echo`, but this makes its function :"
"func:`echofilter` directly available::"
msgstr ""
"Novamente, isso carrega o submódulo :mod:`echo`, mas a função :func:"
"`echofilter`\n"
"está acessível diretamente sem prefixo::"

#: ../../tutorial/modules.rst:463
msgid ""
"Note that when using ``from package import item``, the item can be either a "
"submodule (or subpackage) of the package, or some  other name defined in the "
"package, like a function, class or variable.  The ``import`` statement first "
"tests whether the item is defined in the package; if not, it assumes it is a "
"module and attempts to load it.  If it fails to find it, an :exc:"
"`ImportError` exception is raised."
msgstr ""
"Observe que ao utilizar ``from package import item``, o item pode ser um "
"subpacote,\n"
"submódulo, classe, função ou variável. O comando ``import`` primeiro testa "
"se o\n"
"item está definido no pacote, senão assume que é um módulo e tenta carregá-"
"lo. Se\n"
"falhar em encontrar o módulo uma exceção :exc:`ImportError` é lançada."

#: ../../tutorial/modules.rst:470
msgid ""
"Contrarily, when using syntax like ``import item.subitem.subsubitem``, each "
"item except for the last must be a package; the last item can be a module or "
"a package but can't be a class or function or variable defined in the "
"previous item."
msgstr ""
"Em oposição, em uma construção como ``import item.subitem.subsubitem``, cada "
"item,\n"
"com exceção do último, deve ser um pacote. O último pode ser também um "
"pacote ou\n"
"módulo, mas nunca uma classe, função ou variável contida em um módulo."

#: ../../tutorial/modules.rst:479
msgid "Importing \\* From a Package"
msgstr "Importando \\* de um pacote"

#: ../../tutorial/modules.rst:483
msgid ""
"Now what happens when the user writes ``from sound.effects import *``?  "
"Ideally, one would hope that this somehow goes out to the filesystem, finds "
"which submodules are present in the package, and imports them all.  This "
"could take a long time and importing sub-modules might have unwanted side-"
"effects that should only happen when the sub-module is explicitly imported."
msgstr ""
"Agora, o que acontece quando um usuário escreve ``from sound.effects import\n"
"*`` ? Idealmente, poderia se esperar que este comando vasculhasse o sistema "
"de\n"
"arquivos, encontrasse todos submódulos presentes no pacote, e os "
"importassem.\n"
"Isso pode demorar muito e a importação de submódulos pode ocasionar efeitos\n"
"colaterais que somente deveriam ocorrer quando o submódulo é explicitamente\n"
"importado."

#: ../../tutorial/modules.rst:489
msgid ""
"The only solution is for the package author to provide an explicit index of "
"the package.  The :keyword:`import` statement uses the following convention: "
"if a package's :file:`__init__.py` code defines a list named ``__all__``, it "
"is taken to be the list of module names that should be imported when ``from "
"package import *`` is encountered.  It is up to the package author to keep "
"this list up-to-date when a new version of the package is released.  Package "
"authors may also decide not to support it, if they don't see a use for "
"importing \\* from their package.  For example, the file :file:`sound/"
"effects/__init__.py` could contain the following code::"
msgstr ""
"A única solução é o autor do pacote fornecer um índice explícito do pacote. "
"O\n"
"comando :keyword:`import` usa a seguinte convenção: se o arquivo\n"
":file:`__init__.py` do pacote define uma lista chamada ``__all__``, então "
"esta\n"
"lista indica os nomes dos módulos a serem importados quando o comando "
"``from\n"
"pacote import *`` é acionado. Fica a cargo do autor do pacote manter esta\n"
"lista atualizada, inclusive fica a seu critério excluir inteiramente o "
"suporte\n"
"a importação direta de todo o pacote através de ``from pacote import *``. "
"Por\n"
"exemplo, o arquivo :file:`sounds/effects/__init__.py` poderia conter apenas::"

#: ../../tutorial/modules.rst:501
msgid ""
"This would mean that ``from sound.effects import *`` would import the three "
"named submodules of the :mod:`sound` package."
msgstr ""
"Isso significaria que ``from sound.effects import *`` importaria apenas os\n"
"três submódulos especificados no pacote :mod:`sound`."

#: ../../tutorial/modules.rst:504
msgid ""
"If ``__all__`` is not defined, the statement ``from sound.effects import *`` "
"does *not* import all submodules from the package :mod:`sound.effects` into "
"the current namespace; it only ensures that the package :mod:`sound.effects` "
"has been imported (possibly running any initialization code in :file:"
"`__init__.py`) and then imports whatever names are defined in the package.  "
"This includes any names defined (and submodules explicitly loaded) by :file:"
"`__init__.py`.  It also includes any submodules of the package that were "
"explicitly loaded by previous :keyword:`import` statements.  Consider this "
"code::"
msgstr ""
"Se ``__all__`` não estiver definido, o comando ``from sound.effects import "
"*``\n"
"não importa todos os submódulos do pacote :mod:`sound.effects` no espaço de\n"
"nomes atual. Há apenas garantia que o pacote :mod:`sound.effects` foi\n"
"importado (possivelmente executando qualquer código de inicialização em\n"
":file:`__init__.py`) juntamente com os nomes definidos no pacote. Isso "
"inclui\n"
"todo nome definido em :file:`__init__.py` bem como em qualquer submódulo\n"
"importado a partir deste. Também inclui quaisquer submódulos do pacote que\n"
"tenham sido carregados explicitamente por comandos :keyword:`import`\n"
"anteriores. Considere o código abaixo::"

#: ../../tutorial/modules.rst:517
msgid ""
"In this example, the :mod:`echo` and :mod:`surround` modules are imported in "
"the current namespace because they are defined in the :mod:`sound.effects` "
"package when the ``from...import`` statement is executed.  (This also works "
"when ``__all__`` is defined.)"
msgstr ""
"Nesse exemplo, os nomes :mod:`echo` e :mod:`surround` são importados no "
"espaço\n"
"de nomes atual no momento em que o comando ``from ... import`` é executado,\n"
"pois estão definidos no pacote :mod:`sound.effects`. (Isso também funciona\n"
"quando ``__all__`` estiver definida.)"

#: ../../tutorial/modules.rst:522
msgid ""
"Although certain modules are designed to export only names that follow "
"certain patterns when you use ``import *``, it is still considered bad "
"practice in production code."
msgstr ""
"Apesar de que certos módulos são projetados para exportar apenas nomes\n"
"conforme algum critério quando se faz ``import *``, ainda assim essa "
"sintaxe\n"
"é considerada uma prática ruim em código de produção."

#: ../../tutorial/modules.rst:526
msgid ""
"Remember, there is nothing wrong with using ``from package import "
"specific_submodule``!  In fact, this is the recommended notation unless the "
"importing module needs to use submodules with the same name from different "
"packages."
msgstr ""

#: ../../tutorial/modules.rst:533
msgid "Intra-package References"
msgstr "Referências em um mesmo pacote"

#: ../../tutorial/modules.rst:535
msgid ""
"When packages are structured into subpackages (as with the :mod:`sound` "
"package in the example), you can use absolute imports to refer to submodules "
"of siblings packages.  For example, if the module :mod:`sound.filters."
"vocoder` needs to use the :mod:`echo` module in the :mod:`sound.effects` "
"package, it can use ``from sound.effects import echo``."
msgstr ""
"Quando pacotes são estruturados em subpacotes (como no pacote :mod:`sound` "
"do\n"
"exemplo), pode ser usar a sintaxe de um :keyword:`import` absoluto para se\n"
"referir aos submódulos de pacotes irmãos (o que na prática é uma forma de\n"
"fazer um import relativo, a partir da base do pacote). Por exemplo, se o\n"
"módulo :mod:`sound.filters.vocoder` precisa usar o módulo :mod:`echo` do\n"
"pacote :mod:`sound.effects`, é preciso importá-lo com ``from sound.effects\n"
"import echo``."

#: ../../tutorial/modules.rst:541
msgid ""
"You can also write relative imports, with the ``from module import name`` "
"form of import statement.  These imports use leading dots to indicate the "
"current and parent packages involved in the relative import.  From the :mod:"
"`surround` module for example, you might use::"
msgstr ""

#: ../../tutorial/modules.rst:550
msgid ""
"Note that relative imports are based on the name of the current module.  "
"Since the name of the main module is always ``\"__main__\"``, modules "
"intended for use as the main module of a Python application must always use "
"absolute imports."
msgstr ""

#: ../../tutorial/modules.rst:556
msgid "Packages in Multiple Directories"
msgstr "Pacotes em múltiplos diretórios"

#: ../../tutorial/modules.rst:558
msgid ""
"Packages support one more special attribute, :attr:`__path__`.  This is "
"initialized to be a list containing the name of the directory holding the "
"package's :file:`__init__.py` before the code in that file is executed.  "
"This variable can be modified; doing so affects future searches for modules "
"and subpackages contained in the package."
msgstr ""
"Pacotes possuem mais um atributo especial, :attr:`__path__`. Ele é\n"
"inicializado como uma lista contendo o nome do diretório onde está o "
"arquivo\n"
":file:`__init__.py` do pacote, antes do código naquele arquivo ser "
"executado.\n"
"Esta variável pode ser modificada; isso afeta a busca futura de módulos e\n"
"subpacotes contidos no pacote."

#: ../../tutorial/modules.rst:564
msgid ""
"While this feature is not often needed, it can be used to extend the set of "
"modules found in a package."
msgstr ""
"Apesar de não ser muito usado, esse mecanismo permite estender o conjunto "
"de\n"
"módulos encontrados em um pacote."

#: ../../tutorial/modules.rst:569
msgid "Footnotes"
msgstr "Notas de Rodapé"

#: ../../tutorial/modules.rst:570
msgid ""
"In fact function definitions are also 'statements' that are 'executed'; the "
"execution of a module-level function definition enters the function name in "
"the module's global symbol table."
msgstr ""
"[#] Na verdade, definições de funções também são 'comandos' que são\n"
" 'executados'; a execução da definição de uma função coloca o nome da\n"
" função na tabela de símbolos global do módulo."
